pico-8 cartridge // http://www.pico-8.com
version 34
__lua__

entities={}

function circ_circ(ent,oth)
 if ent == oth then return false end
 dist_x = ent.x - oth.x
 dist_y = ent.y - oth.y
 rad_sum = ent.r + oth.r
 return dist_x*dist_x + dist_y*dist_y <= rad_sum*rad_sum+1
end

--function circ_rect(ent,x,y,w,h)
-- dx = abs(ent.x - x)
-- dy = abs(ent.y - y)
-- return dx <= (w/2 + ent.r) and dy <= (h/2 + ent.r)
--end

--determines if a specific point on the map is solid
function solid(x,y)
 return fget(mget(x\8,y\8),0)
end

--returns true if something at x,y of size r is colliding with the map
function mapcoll(x, y, r)
 return solid(x-r, y-r)
  or solid(x+r, y-r)
  or solid(x-r, y+r)
  or solid(x+r, y+r)
end

function _init()
 obj1={x=20,y=36,r=4,c=6}
 add(entities,obj1)
 obj1={x=28,y=44,r=4,c=6}
 add(entities,obj1)

 pl={x=10,y=10,r=3.5,c=8,dx=0,dy=0}
 add(entities,pl)
end


function _update()
 pl.dx=0
 pl.dy=0
 if(btn(0)) pl.dx=-1
 if(btn(1)) pl.dx=1
 if(btn(2)) pl.dy=-1
 if(btn(3)) pl.dy=1

 local oldx,oldy = pl.x,pl.y
 pl.x+=pl.dx
 pl.y+=pl.dy

 if (mapcoll(pl.x, oldy, pl.r)) then pl.x=oldx end
 if (mapcoll(oldx, pl.y, pl.r)) then pl.y=oldy end
end


function _draw()
 cls()
 map(0,0,0,0,16,16)
 for e in all(entities) do
  rect(e.x-e.r,e.y-e.r,e.x+e.r,e.y+e.r,7)
  pset(e.x,e.y,e.c)
  circ(e.x,e.y,e.r,circ_circ(pl,e) and e.c+4 or e.c)
 end
end

__gfx__
00000000311111140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000411111130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000100010101010101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000100000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000100000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000100000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
