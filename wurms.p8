pico-8 cartridge // http://www.pico-8.com
version 34
__lua__

function circ_circ(x1,y1,r1,x2,y2,r2)
 dist_x = x1 - x2
 dist_y = y1 - y2
 rad_sum = r1 + r2
 return dist_x*dist_x + dist_y*dist_y <= rad_sum*rad_sum+1
end

function collide_wurm(x,y,r,w)
 w_head=w.body[1+(w.i-1)%#w.body]
 if circ_circ(x,y,r,w_head[1],w_head[2],w.len+w.size*2) then
  --(x,y) is close enough to wurm's head to potentially touch its body
  for b in all(w.body) do
   if circ_circ(x,y,r,b[1],b[2],w.size) then
    --circle of radius r at (x,y) is touching a segment of the wurm
    return true
   end
  end
 end
 return false
end

function new_wurm(x, y, len, goal)
 local s = {}
 s.body={}
 for i=1,len do
  add(s.body,{x,y})
 end
 s.len=len
 s.size=4
 s.i=0
 s.turn=0
 s.velocity=1
 s.goal=goal.phys_comp
 s.support=nil
 --lower accuracy score means:
 --faster turning
 --less "wobble"
 s.accuracy=rnd(100)+1 

 s.update = function(self)
  new_head=self.body[1+self.i]
  local tail_in_ground = solid(new_head[1],new_head[2])
  old_head=self.body[1+(self.i-1)%#self.body]
  local head_in_ground = solid(old_head[1],old_head[2])

  if self.support == nil and not head_in_ground then
   self.support = {old_head[1],old_head[2]}
  elseif self.support ~= nil and head_in_ground then
   self.support = nil
  end
  
  local midpt_supported = true
  if self.support ~= nil then
   midpt_supported = circ_circ(old_head[1],old_head[2],self.len/2,self.support[1],self.support[2],1)
  end

  --last segment becomes first segment
  --means all other segments don't need to move, efficient
  new_head[1]=old_head[1]+cos(self.turn)*self.velocity
  new_head[2]=old_head[2]+sin(self.turn)*self.velocity

  --aim downwards if too far out of terrain
  local supported = head_in_ground or (tail_in_ground and midpt_supported)
  local goal = supported and self.goal or {x=new_head[1],y=new_head[2]+100}
  local accuracy = supported and self.accuracy or 4

  local diff = (atan2(goal.x - new_head[1],goal.y - new_head[2]) - self.turn + 0.5) % 1 - 0.5
  --turn towards the target with v/a speed. sin(a/100)/100 is the "wiggle"
  self.turn += ((diff<-0.5 and diff+1 or diff) * self.velocity/accuracy + sin(accuracy/100)/100)

  self.accuracy-=1
  self.i=(self.i+1) % #self.body
  if (self.accuracy<5) self.accuracy=rnd(100)+1
 end

 s.draw = function(self)
  for seg in all(self.body) do
   circfill(seg[1], seg[2], self.size, 9)
  end
  if(self.support ~= nil) pset(self.support[1],self.support[2],8)
 end

 add(cur_world.wurms, s)
 add(cur_world.entities, s)
 return s
end

function new_particle(x,y,dx,dy,lifetime)
 local p = {}
 p.x=x
 p.y=y
 p.dx=dx
 p.dy=dy
 p.lifetime=lifetime
 p.t=0

 p.update = function(self)
  if(self.t > self.lifetime) del(cur_world.particles, self)
  self.x += self.dx
  self.y += self.dy
  self.t += 1
 end

 p.draw = function(self)
  pset(self.x,self.y,7)
 end

 add(cur_world.particles,p)
 return p
end

function new_vibration(x, y, max_size)
 local v = {}
 v.x=x
 v.y=y
 v.max_size=max_size
 v.size=1

 v.update = function(self)
  if(self.size > self.max_size) del(cur_world.entities,self)
  self.size += 1

  for w in all(cur_world.wurms) do
   if collide_wurm(self.x,self.y,self.size,w) then
    w.goal = {x=self.x, y=self.y}
   end
  end
 end

 v.draw = function(self)
  pset(self.x,self.y,8)
 end

 for i=1,16 do 
  new_particle(x,y,cos(i/16),sin(i/16),max_size)
 end

 add(cur_world.entities, v)
 return v
end

--determines if a specific point on the map is solid
function solid(x, y)
 return fget(mget(x/8, y/8), 0)
end

function _init()
 overworld={map={},wurms={},entities={},particles={}}
 cur_world=overworld

 bit = {
  phys_comp = {x=63,y=32},
  update = function(self)
   if (btn(0)) self.phys_comp.x -= 1
   if (btn(1)) self.phys_comp.x += 1
   if (btn(2)) self.phys_comp.y -= 1
   if (btn(3)) self.phys_comp.y += 1
   if (btnp(4)) new_vibration(self.phys_comp.x,self.phys_comp.y, 30)
  end,
  draw = function(self)
   pset(self.phys_comp.x,self.phys_comp.y,7)
  end
 }
 add(cur_world.entities,bit)

 wyrm = new_wurm(63,100,64,bit)
end

function _update()
 for e in all(cur_world.entities) do
  e:update()
 end
 for p in all(cur_world.particles) do
  p:update()
 end 
end

function _draw()
 cls()
 map(0,0,0,0,16,16)
 for e in all(cur_world.entities) do
  e:draw()
 end
 for p in all(cur_world.particles) do
  p:draw()
 end
 --print("mem "..stat(0),0,0,7)
 --print("cpu "..stat(1),0,8,7)
 print(collide_wurm(bit.phys_comp.x,bit.phys_comp.y,1, wyrm),0,16,7)
end


__gfx__
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
