pico-8 cartridge // http://www.pico-8.com
version 34
__lua__

function circ_circ(x1,y1,r1,x2,y2,r2)
 dist_x = x1 - x2
 dist_y = y1 - y2
 rad_sum = r1 + r2
 return dist_x*dist_x + dist_y*dist_y <= rad_sum*rad_sum+1
end

function new_wurm(x, y, len, goal)
 local s = {}
 s.body={}
 for i=1,len do
  add(s.body,{x,y})
 end
 s.len=len
 s.size=4
 s.i=0
 s.turn=0
 s.velocity=1
 s.goal=goal
 s.support=nil
 s.accuracy=rnd(100)+1 --lower accuracy means smarter wurm
 --s.fall_timer=0 --frames wurm has spent above ground before arcing downward

 s.update = function(self)
  new_head=self.body[1+self.i]
  local tail_in_ground = solid(new_head[1],new_head[2])
  old_head=self.body[1+(self.i-1)%#self.body]
  local head_in_ground = solid(old_head[1],old_head[2])

  if self.support == nil and not head_in_ground then
   self.support = {old_head[1],old_head[2]}
  elseif self.support ~= nil and head_in_ground then
   self.support = nil
  end
  
  local midpt_supported = true
  if self.support ~= nil then
   midpt_supported = circ_circ(old_head[1],old_head[2],self.len/2,self.support[1],self.support[2],1)
  end

  --last segment becomes first segment
  --means all other segments don't need to move, efficient
  new_head[1]=old_head[1]+cos(self.turn)*self.velocity
  new_head[2]=old_head[2]+sin(self.turn)*self.velocity

  --aim downwards if on top half of screen for too long
  local supported = head_in_ground or (tail_in_ground and midpt_supported)
  local goal = supported and self.goal or {x=new_head[1],y=new_head[2]+100}
  local accuracy = supported and self.accuracy or 4


  local diff = (atan2(goal.x - new_head[1],goal.y - new_head[2]) - self.turn + 0.5) % 1 - 0.5
  --turn towards the target with v/a speed. sin(a/100)/100 is the "wiggle"
  self.turn += ((diff<-0.5 and diff+1 or diff) * self.velocity/accuracy + sin(accuracy/100)/100)

  self.accuracy-=1
  self.i=(self.i+1) % #self.body
  if (self.accuracy<5) self.accuracy=rnd(100)+1
 end

 s.draw = function(self)
  for seg in all(self.body) do
   circfill(seg[1], seg[2], self.size, 9)
  end
  if(self.support ~= nil) pset(self.support[1],self.support[2],8)
 end

 return s
end

--determines if a specific point on the map is solid
function solid(x, y)
 return fget(mget(x/8, y/8), 0)
end

function _init()
 bit = {x=63,y=32}
 wurms = {}
 add(wurms, new_wurm(63,100,64,bit))
end

function _update()
 for w in all(wurms) do
  w:update()
 end
end

function _draw()
 cls()
 map(0,0,0,0,16,16)
 pset(bit.x,bit.y,7)
 for w in all(wurms) do
  w:draw()
 end
 print("mem "..stat(0),0,0,7)
 print("cpu "..stat(1),0,8,7)
end


__gfx__
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001010101010100000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001010101010100000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001010101010100000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000001010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
